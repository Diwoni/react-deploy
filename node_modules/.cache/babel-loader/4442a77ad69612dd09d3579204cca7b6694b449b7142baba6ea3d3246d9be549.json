{"ast":null,"code":"import { rest } from 'msw';\nconst BASE_URL = 'http://localhost:3000';\nconst VALID_EMAIL = 'user@example.com';\nconst VALID_PASSWORD = 'password123';\nexport const loginHandler = [rest.post(`${BASE_URL}/api/members/login`, (req, res, ctx) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (email === VALID_EMAIL && password === VALID_PASSWORD) {\n    const response = {\n      email,\n      token: 'mocked-jwt-token'\n    };\n    return res(ctx.status(200), ctx.json(response));\n  } else {\n    return res(ctx.status(403), ctx.json({\n      message: 'Invalid email or password'\n    }));\n  }\n})];","map":{"version":3,"names":["rest","BASE_URL","VALID_EMAIL","VALID_PASSWORD","loginHandler","post","req","res","ctx","email","password","body","response","token","status","json","message"],"sources":["/Users/jiwon/Desktop/KaKaoTech/Step2/5주차 과제/week5/react-product-login/src/api/hooks/login.mock.ts"],"sourcesContent":["import { rest } from 'msw';\n\nconst BASE_URL = 'http://localhost:3000';\n\ntype LoginRequestBody = {\n  email: string;\n  password: string;\n};\n\ntype LoginSuccessResponse = {\n  email: string;\n  token: string;\n};\n\nconst VALID_EMAIL = 'user@example.com';\nconst VALID_PASSWORD = 'password123';\n\nexport const loginHandler = [\n  rest.post(`${BASE_URL}/api/members/login`, (req, res, ctx) => {\n    const { email, password } = req.body as LoginRequestBody;\n\n    if (email === VALID_EMAIL && password === VALID_PASSWORD) {\n      const response: LoginSuccessResponse = {\n        email,\n        token: 'mocked-jwt-token',\n      };\n      return res(ctx.status(200), ctx.json(response));\n    } else {\n      return res(ctx.status(403), ctx.json({ message: 'Invalid email or password' }));\n    }\n  }),\n];\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,KAAK;AAE1B,MAAMC,QAAQ,GAAG,uBAAuB;AAYxC,MAAMC,WAAW,GAAG,kBAAkB;AACtC,MAAMC,cAAc,GAAG,aAAa;AAEpC,OAAO,MAAMC,YAAY,GAAG,CAC1BJ,IAAI,CAACK,IAAI,CAAE,GAAEJ,QAAS,oBAAmB,EAAE,CAACK,GAAG,EAAEC,GAAG,EAAEC,GAAG,KAAK;EAC5D,MAAM;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAGJ,GAAG,CAACK,IAAwB;EAExD,IAAIF,KAAK,KAAKP,WAAW,IAAIQ,QAAQ,KAAKP,cAAc,EAAE;IACxD,MAAMS,QAA8B,GAAG;MACrCH,KAAK;MACLI,KAAK,EAAE;IACT,CAAC;IACD,OAAON,GAAG,CAACC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,EAAEN,GAAG,CAACO,IAAI,CAACH,QAAQ,CAAC,CAAC;EACjD,CAAC,MAAM;IACL,OAAOL,GAAG,CAACC,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,EAAEN,GAAG,CAACO,IAAI,CAAC;MAAEC,OAAO,EAAE;IAA4B,CAAC,CAAC,CAAC;EACjF;AACF,CAAC,CAAC,CACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}